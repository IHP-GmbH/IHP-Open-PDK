# frozen_string_literal: true

#=========================================================================================
# Copyright 2025 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=========================================================================================

if FEOL
  #==============================================
  #----------------- 5.14. Cont -----------------
  #==============================================

  logger.info('Starting 5.14. Cont table')

  # Cont derivations

  # Rule Cnt.a: Min. and max. Cont width is 0.16µm
  logger.info('Executing rule Cnt.a')
  cnt_a_value = drc_rules['Cnt_a'].to_f
  cnt_a_l = cont_sq.without_bbox_width(cnt_a_value.um)
  cnt_a_l.output('Cnt.a', "5.14. Cnt.a : Min. and max. Cont width: #{cnt_a_value} µm")
  cnt_a_l.forget

  # Rule Cnt.b: Min. Cont space is 0.18µm
  logger.info('Executing rule Cnt.b')
  cnt_b_value = drc_rules['Cnt_b'].to_f
  cnt_b_l = cont_sq.space(cnt_b_value.um, euclidian)
  cnt_b_l.output('Cnt.b', "5.14. Cnt.b : Min. Cont space: #{cnt_b_value} µm")
  cnt_b_l.forget

  unless PRECHECK_DRC
    # Rule Cnt.c: Min. Activ enclosure of Cont is 0.07 um
    logger.info('Executing rule Cnt.c')
    cnt_c_value = drc_rules['Cnt_c'].to_f
    cnt_c_l = cont_sq.enclosed(activ_drw, cnt_c_value.um, euclidian)
    cnt_c_l.output('Cnt.c', "5.14. Cnt.c Min. Activ enclosure of Cont is #{cnt_c_value} um")
    cnt_c_l.forget

    # Rule Cnt.d: Min. GatPoly enclosure of Cont is 0.07 um
    logger.info('Executing rule Cnt.d')
    cnt_d_value = drc_rules['Cnt_d'].to_f
    cnt_d_l = cont_sq.enclosed(gatpoly_drw, cnt_d_value.um, euclidian)
    cnt_d_l.output('Cnt.d', "5.14. Cnt.d Min. GatPoly enclosure of Cont is #{cnt_d_value} um")
    cnt_d_l.forget

    # Rule Cnt.e: Min. Cont on GatPoly space to Activ is 0.14 um
    logger.info('Executing rule Cnt.e')
    cnt_e_value = drc_rules['Cnt_e'].to_f
    cnt_e_l1 = cont_sq.and(gatpoly_drw)
    cnt_e_l = cnt_e_l1.sep(activ_drw, cnt_e_value.um, euclidian)
    cnt_e_l.output('Cnt.e', "5.14. Cnt.e Min. Cont on GatPoly space to Activ is #{cnt_e_value} um")
    cnt_e_l1.forget
    cnt_e_l.forget

    # Rule Cnt.g1: Min. pSD space to Cont on nSD-Activ is 0.09 um
    logger.info('Executing rule Cnt.g1')
    cnt_g1_value = drc_rules['Cnt_g1'].to_f
    cnt_g1_l1 = cont_sq.and(nactiv)
    cnt_g1_l = cnt_g1_l1.sep(psd_drw, cnt_g1_value.um, euclidian)
    cnt_g1_l.output('Cnt.g1', "5.14. Cnt.g1 Min. pSD space to Cont on nSD-Activ is #{cnt_g1_value} um")
    cnt_g1_l1.forget
    cnt_g1_l.forget

    # Rule Cnt.g2: Min. pSD overlap of Cont on pSD-Activ is 0.09 um
    logger.info('Executing rule Cnt.g2')
    cnt_g2_value = drc_rules['Cnt_g2'].to_f
    cnt_g2_l1 = cont_sq.and(pactiv)
    cnt_g2_l = cnt_g2_l1.enclosed(psd_drw, cnt_g2_value.um, euclidian)
    cnt_g2_l.output('Cnt.g2', "5.14. Cnt.g2 Min. pSD overlap of Cont on pSD-Activ is #{cnt_g2_value} um")
    cnt_g2_l1.forget
    cnt_g2_l.forget
  end
end
