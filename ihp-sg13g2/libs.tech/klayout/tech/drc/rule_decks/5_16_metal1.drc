# frozen_string_literal: true

#=========================================================================================
# Copyright 2025 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=========================================================================================

if BEOL
  #================================================
  #----------------- 5.16. Metal1 -----------------
  #================================================

  logger.info('Starting 5.16. Metal1 table')

  # Metal1 derivations

  # Rule M1.a: Min. Metal1 width is 0.16µm
  logger.info('Executing rule M1.a')
  m1_a_value = drc_rules['M1_a'].to_f
  m1_a_l = metal1_drw.width(m1_a_value.um, euclidian)
  m1_a_l.output('M1.a', "5.16. M1.a: Min. Metal1 width: #{m1_a_value} μm.")
  m1_a_l.forget

  # Rule M1.b: Min. Metal1 space or notch is 0.18µm
  logger.info('Executing rule M1.b')
  m1_b_value = drc_rules['M1_b'].to_f
  m1_b_l = metal1_drw.space(m1_b_value.um, euclidian)
  m1_b_l.output('M1.b', "5.16. M1.b: Min. Metal1 space or notch: #{m1_b_value}μm.")
  m1_b_l.forget

  unless PRECHECK_DRC
    # Rule M1.e: Min. space of Metal1 lines if, at least one line is wider 
    # than 0.3 µm and the parallel run is more than 1.0 µm is 0.22 um
    logger.info('Executing rule M1.e')
    m1_e_value = drc_rules['M1_e'].to_f
    m1_e_width = drc_rules['M1_e_w'].to_f / 2
    m1_e_length = drc_rules['M1_e_cr'].to_f
    m1_e_l1 = metal1_drw.sized(-1 * m1_e_width.um).sized(m1_e_width.um)
    m1_e_l = metal1_drw.sep(m1_e_l1, m1_e_value.um, projection_limits(m1_e_length.um + 0.001.um, nil))
    m1_e_l.output('M1.e',
                "5.16. M1.e Min. space of Metal1 lines if, at least one line is wider than #{m1_e_width} µm and the parallel run is more than #{m1_e_length} µm is #{m1_e_value} um")
    m1_e_l1.forget
    m1_e_l.forget

    # Rule M1.f: Min. space of Metal1 lines if, at least one line is wider
    # than 10.0 µm and the parallel run is more than 10.0 µm is 0.60 um
    logger.info('Executing rule M1.f')
    m1_f_value = drc_rules['M1_f'].to_f
    m1_f_width = drc_rules['M1_f_w'].to_f / 2
    m1_f_length = drc_rules['M1_f_cr'].to_f
    m1_f_l1 = metal1_drw.sized(-1 * m1_f_width.um).sized(m1_f_width.um)
    m1_f_l = metal1_drw.sep(m1_f_l1, m1_f_value.um, projection_limits(m1_f_length.um + 0.001.um, nil))
    m1_f_l.output('M1.f',
                "5.16. M1.f Min. space of Metal1 lines if, at least one line is wider than #{m1_f_width} µm and the parallel run is more than #{m1_f_length} µm is #{m1_f_value} um")
    m1_f_l1.forget
    m1_f_l.forget

    # Rule M1.g: Min. 45-degree bent Metal1 width if the bent metal length is > 0.5 µm is 0.20 um
    logger.info('Executing rule M1.g')
    m1_g_value = drc_rules['M1_g'].to_f
    m1_g_length = drc_rules['M1_g_min'].to_f
    m1_g_l1 = metal1_drw.edges.with_angle(45, absolute)
    m1_g_l2 = m1_g_l1.with_length(m1_g_length.um + 0.001.um, nil)
    m1_g_l = m1_g_l2.width(m1_g_value.um, euclidian)
    m1_g_l.output('M1.g',
                "5.16. M1.g Min. 45-degree bent Metal1 width if the bent metal length is > #{m1_g_length} µm is #{m1_g_value} um")
    m1_g_l1.forget
    m1_g_l2.forget
    m1_g_l.forget

    # Rule M1.i: Min. space of Metal1 lines of which at least one is bent by 45-degree is 0.22 um
    logger.info('Executing rule M1.i')
    m1_i_value = drc_rules['M1_i'].to_f
    m1_i_l1 = metal1_drw.edges.with_angle(45, absolute)
    m1_i_l = metal1_drw.edges.sep(m1_i_l1, m1_i_value.um, euclidian)
    m1_i_l.output('M1.i',
                "5.16. M1.i Min. space of Metal1 lines of which at least one is bent by 45-degree is #{m1_i_value} um")
    m1_i_l1.forget
    m1_i_l.forget
  end
end

