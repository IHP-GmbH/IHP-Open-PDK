# frozen_string_literal: true

#=========================================================================================
# Copyright 2025 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=========================================================================================

if BEOL
  #===============================================
  #--------------- 5.25. TopMetal2 ---------------
  #===============================================

  logger.info('Starting 5.25. TopMetal2 table')

  # TopMetal2 derivations

  # Rule TM2.a: Min. TopMetal2 width is 2.00µm
  logger.info('Executing rule TM2.a')
  tm2_a_value = drc_rules['TM2_a'].to_f
  tm2_a_l = topmetal2_drw.width(tm2_a_value.um, euclidian)
  tm2_a_l.output('TM2.a', "5.25. TM2.a: Min. TopMetal2 width: #{tm2_a_value} μm.")
  tm2_a_l.forget

  # Rule TM2.b: Min. TopMetal2 space or notch is 2.00µm
  logger.info('Executing rule TM2.b')
  tm2_b_value = drc_rules['TM2_b'].to_f
  tm2_b_l = topmetal2_drw.space(tm2_b_value.um, euclidian)
  tm2_b_l.output('TM2.b', "5.25. TM2.b: Min. TopMetal2 space or notch: #{tm2_b_value} μm.")
  tm2_b_l.forget

  unless PRECHECK_DRC
    # Rule TM2.bR: Min. space of TopMetal2 lines if, at least one line is 
    # wider than 5.0 µm and the parallel run is more than 50.0 µm is 5.00 um
    logger.info('Executing rule TM2.bR')
    tm2_br_value = drc_rules['TM2_bR'].to_f
    tm2_br_width = drc_rules['TM2_bR_w'].to_f / 2
    tm2_br_length = drc_rules['TM2_bR_cr'].to_f
    tm2_br_l1 = topmetal2_drw.not(ind_drw)
    tm2_br_l2 = tm2_br_l1.sized(-1 * tm2_br_width.um).sized(tm2_br_width.um)
    tm2_br_l = topmetal2_drw.sep(tm2_br_l2, tm2_br_value.um, projection_limits(tm2_br_length.um + 0.001.um, nil))
    tm2_br_l.output('TM2.bR',
                  "5.25. TM2.bR : Min. space of TopMetal2 lines if, at least one line is wider than #{tm2_br_width} µm
                  and the parallel run is more than #{tm2_br_length} µm is #{tm2_br_value} um")
    tm2_br_l1.forget
    tm2_br_l2.forget
    tm2_br_l.forget
  end
end
