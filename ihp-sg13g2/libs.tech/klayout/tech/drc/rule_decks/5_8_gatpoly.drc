# frozen_string_literal: true

#=========================================================================================
# Copyright 2025 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=========================================================================================

if FEOL
  #================================================
  #----------------- 5.8. GatPoly -----------------
  #================================================

  logger.info('Starting 5.8. GatPoly table')

  # GatPoly derivations

  # Rule Gat.a: Min. GatPoly width is 0.13µm
  logger.info('Executing rule Gat.a')
  gat_a_value = drc_rules['Gat_a'].to_f
  gata_l1 = gatpoly_drw.width(gat_a_value.um, euclidian)
  gata_l1.output('Gat.a', "5.8. Gat.a : Min. GatPoly width: #{gat_a_value} µm")
  gata_l1.forget

  # Rule Gat.b: Min. GatPoly space or notch is 0.18µm.
  logger.info('Executing rule Gat.b')
  gat_b_value = drc_rules['Gat_b'].to_f
  gatb_l1 = gatpoly_drw.space(gat_b_value.um, euclidian)
  gatb_l1.output('Gat.b', "5.8. Gat.b :Min. GatPoly space or notch: #{gat_b_value} µm.")
  gatb_l1.forget

  # Rule Gat.d: Min. GatPoly space to Activ is 0.07µm.
  logger.info('Executing rule Gat.d')
  gat_d_value = drc_rules['Gat_d'].to_f
  gatd_l1 = gatpoly_drw.sep(activ_drw, gat_d_value.um, euclidian)
  gatd_l1.output('Gat.d', "5.8. Gat.d :Min. GatPoly space to Activ: #{gat_d_value} µm.")
  gatd_l1.forget

  unless PRECHECK_DRC
    # Rule Gat.a1: Min. GatPoly width for channel length of 1.2 V NFET is 0.13 um
    logger.info('Executing rule Gat.a1')
    gat_a1_value = drc_rules['Gat_a1'].to_f
    ngate_lv = ngate.not(thickgateox_drw)
    gat_a1 = ngate_lv.edges.inside_part(activ_drw).width(gat_a1_value.um, euclidian)
    gat_a1.output('Gat.a1', "5.8. Gat.a1 Min. GatPoly width for channel length of 1.2V NFET is #{gat_a1_value} um")
    gat_a1.forget

    # Rule Gat.a2: Min. GatPoly width for channel length of 1.2 V PFET is 0.13 um
    logger.info('Executing rule Gat.a2')
    gat_a2_value = drc_rules['Gat_a2'].to_f
    pgate_lv = pgate.not(thickgateox_drw)
    gat_a2 = pgate_lv.edges.inside_part(activ_drw).width(gat_a2_value.um, euclidian)
    gat_a2.output('Gat.a2', "5.8. Gat.a2 Min. GatPoly width for channel length of 1.2V PFET is #{gat_a2_value} um")
    gat_a2.forget

    # Rule Gat.g: Min. GatPoly width for 45-degree bent shapes if the bend GatPoly length is > 0.39 µm is 0.16 um
    logger.info('Executing rule Gat.g')
    gat_g_value = drc_rules['Gat_g'].to_f
    gat_g_length = drc_rules['Gat_g_min'].to_f
    gat_g_p1 = gatpoly_drw.edges.with_angle(45, absolute)
    gat_g_p2 = gat_g_p1.with_length(gat_g_length.um, nil)
    gat_g = gat_g_p2.width(gat_g_value.um, euclidian)
    gat_g.output('Gat.g',
                 "5.8. Gat.g Min. GatPoly width for 45-degree bent shapes if the bend GatPoly,length is > 0.39 µm is #{gat_g_value} um")
    gat_g_p1.forget
    gat_g_p2.forget
    gat_g.forget
  end
end
