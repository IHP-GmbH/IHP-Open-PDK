# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#================================
# ------- CAP DERIVATIONS -------
#================================

logger.info('Starting CAP DERIVATIONS')

rfmimcap_exc = ind_drw.join(ind_pin)

# === MIMCAP ===
mimcap_exclude = pwell_block.join(rfmimcap_exc)
mim_top = mim_drw.overlapping(topmetal1_con)
mim_btm = mim_drw.and(metal5_con)
mim_via = vmim_drw.join(topvia1_drw).and(mim_drw)
topvia1_n_cap = topvia1_drw.not(mim_via)

# === cap_cmim ===
cmim_top = mim_top.not(mimcap_exclude)
cmim_btm = mim_btm.covering(cmim_top)
cmim_dev = mim_drw.covering(cmim_top).and(cmim_btm)

# === rfcmim ===
rfmim_area = pwell_block.interacting(mim_drw)
rfmim_top = mim_top.and(rfmim_area).not(rfmimcap_exc)
rfmim_btm = mim_btm.and(rfmim_area).covering(rfmim_top)
rfmim_dev = mim_drw.covering(rfmim_top).and(rfmim_btm)
# the extents function returns the bounding box of all shapes for a layer
# while ptaps.extents may work for cells with individual devices,
# the result for a large block will be probably not be what is expected.
# Since the rfcmim cells have defined layout, the subregion can be sized to connect
# with the ptap ring.
#rfmim_sub = ptap.extents.interacting(rfmim_area)
rfmim_sub = rfmim_area.sized(1.um)
rfmeas_mk = metal5_con.overlapping(rfmim_btm).and(rfmim_area)

# === svaricap ===
cap_exc = nsd_drw.join(trans_drw).join(emwind_drw)
            .join(emwihv_drw).join(salblock_drw).join(polyres_drw)
            .join(extblock_drw).join(res_drw).join(activ_mask)
            .join(recog_diode).join(recog_esd).join(ind_drw)
            .join(ind_pin).join(substrate_drw)

varicap_exc = pwell.join(pwell_block).join(nwell_holes).join(cap_exc)

varicap_core = ngate_hv_base.and(nwell_iso).not(varicap_exc)
varicap_diff_port = nactiv.interacting(varicap_core).not(varicap_core)
                    .and(nwell_iso).not(varicap_exc).sized(-1.nm)
varicap_poly_port = gatpoly.interacting(varicap_core)
varicap_ports = varicap_poly_port.join(varicap_diff_port)
varicap_sub = ptap.and(thickgateox_drw)
varicap_dev_mk = thickgateox_drw.covering(varicap_core).interacting(varicap_ports)
