# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#=========== CUSTOM READER ===========

# Custom reader for subcircuit models
class CustomReader < RBA::NetlistSpiceReaderDelegate
  # Cleanup sch for R, C elements
  def clean_sch(line, element)
    # Extracting parameters with values
    valid_params = line.scan(/\b\w+\s*=\s*\S+\b/)

    case element
    when 'R'
      # For 2 term res [<nets> <model> <params>]
      num_terms = 3
    when 'C'
      # Determine number of terms based on component type
      num_terms =
        if line.downcase.include?('varicap')
          5
        elsif line.downcase.include?('rfcmim')
          4
        else
          3
        end
    end
    line_no_param = line.split(' ').take(num_terms).join(' ')
    "#{line_no_param.strip} #{valid_params.join(' ')}"
  end

  # Override parse_element method to handle exceptions gracefully
  def parse_element(line, element)

    # Remove the slash that separates the pins from the device type:
    # XDECINV net1 CS_OUT VDD VSS / RSC_IHPSG13_INVX4
    # to
    # XDECINV net1 CS_OUT VDD VSS RSC_IHPSG13_INVX4
    line = line.gsub(/\s+\/\s+/, ' ')
    
    # Remove $[...] around the device type:
    # C0 PLUS1 MINUS1 $[cap_cmim] 74.620f w=6.99u l=6.99u m=1
    # to
    # C0 PLUS1 MINUS1 cap_cmim 74.620f w=6.99u l=6.99u m=1
    line = line.gsub(/\$\[(.+)\]/, '\1')

    # Prep sch for R, C
    line = clean_sch(line, element) if %w[R C].include?(element)

    super
  rescue StandardError
    case element
    when 'C'
      if line.downcase.include?('varicap')
        super(line.to_s, 'M')
      elsif line.downcase.include?('rfcmim')
        super(line.to_s, 'Q')
      else
        super("#{line} C=1e-18", element)
      end
    when 'R'
      super("#{line} R=0", element)
    when 'D'
      if line.downcase.include?('diodev') || line.downcase.include?('schottky')
        super(line.to_s, 'Q')
      else
        super(line.to_s, element)
      end
    when 'L'
      if line.downcase.include?('inductor3')
        super("#{line} L=0", 'M')
      else
        super("#{line} L=0", element)
      end
    else
      super
    end
  end

  # Override the element method to handle different types of elements
  def element(circuit, ele, name, model, value, nets, params)
    if CUSTOM_READER.include?(ele)
      process_device(ele, circuit, name, model, nets, params)
    else
      super
    end
    true
  end

  private

  # Process device element
  def process_device(ele, circuit, name, model, nets, params)
    cls = circuit.netlist.device_class_by_name(model)
    cls ||= create_device_class(ele, circuit, model, nets.size)

    device = circuit.create_device(cls, name)
    connect_terminals(ele, device, model, nets)
    map_params(ele, device, model, params)
  end

  # Create or retrieve the device class based on the element type, model name, and number of nets.
  #
  # @param ele [String] The type of element (C, R, Q, L).
  # @param circuit [Circuit] The circuit object to which the device class will be added.
  # @param model [String] The model name of the device class.
  # @param num_nets [Integer] The number of nets the device class should have.
  # @return [RBA::DeviceClass] The created or retrieved device class.
  def create_device_class(ele, circuit, model, num_nets)
    cls = case ele
          when 'M' then RBA::DeviceClassMOS4Transistor.new
          when 'C' then create_capacitor(model, num_nets)
          when 'R' then create_resistor(model, num_nets)
          when 'Q' then create_bjt(model, num_nets)
          when 'L' then DeviceCustomInd.new(model, num_nets - 1)
          when 'D' then create_diode(model)
          else
            return super
          end

    cls.name = model
    circuit.netlist.add(cls)
    cls
  end

  # Create a capacitor device class.
  def create_capacitor(model, num_nets)
    if model.downcase.include?('varicap')
      raise ArgumentError, 'Varicap should have 4 nodes, please recheck' unless num_nets == 4

      DeviceCustomVaractor.new(model, num_nets - 1)
    else
      raise ArgumentError, 'Capacitor should have 2 or 3 nodes, please recheck' unless [2, 3].include?(num_nets)

      DeviceCustomMIM.new(model)

    end
  end

  # Create a diode device class.
  def create_diode(model)
    if model.downcase.include?('diodev') || model.downcase.include?('schottky')
      Esd3Term.new
    elsif model.downcase.include?('nmoscl')
      Esd2Term.new
    else
      EnDiode.new
    end
  end

  # Create a resistor device class.
  def create_resistor(model, num_nets)
    if RES_DEV.any? { |res| model.downcase.start_with?(res) }
      DeviceCustomRes.new(model, num_nets)
    elsif num_nets == 2 && model.downcase.include?('tap')
      RBA::DeviceClassDiode.new
    elsif num_nets == 2
      RBA::DeviceClassResistor.new
    elsif num_nets == 3
      RBA::DeviceClassResistorWithBulk.new
    else
      raise ArgumentError, 'Resistor should have two or three nodes, please recheck'
    end
  end

  # Create a bjt device class.
  def create_bjt(model, _num_nets)
    if model.downcase.include?('pnp')
      CustomBJT3.new
    else
      CustomBJT4.new
    end
  end

  # Connect device terminals based on element type, device, model, and nets.
  #
  # @param ele [String] The type of element (C, R, Q).
  # @param device [RBA::Device] The device object to which terminals will be connected.
  # @param model [String] The model name of the device.
  # @param nets [Array<String>] Array of net names to which terminals will be connected.
  def connect_terminals(ele, device, model, nets)
    term_list = terminal_list_for_element(ele, model, nets)

    term_list.each_with_index do |t, index|
      device.connect_terminal(t, nets[index])
    end
  end

  # Determine terminal list based on element type, model, and nets.
  def terminal_list_for_element(ele, model, nets)
    case ele
    when 'M'
      %w[D G S B]
    when 'Q'
      model.downcase.include?('pnp') ? %w[C B E] : %w[C B E S]
    when 'C'
      model.downcase.include?('varicap') ? gen_term_with_sub(model, nets.size) : gen_mim_terms(model)
    when 'R'
      if RES_DEV.any? { |res| model.downcase.start_with?(res) }
        gen_term_names(model, nets.size)
      elsif model.downcase.include?('tap')
        %w[C A]
      else
        nets.size == 3 ? %w[A B W] : %w[A B]
      end
    when 'D'
      if model.downcase.include?('diodevdd')
        %w[B E C]
      elsif model.downcase.include?('diodevss')
        %w[C E B]
      elsif model.downcase.include?('schottky')
        %w[E B C]
      elsif model.downcase.include?('nmoscl')
        %w[C A]
      else
        %w[A C]
      end
    when 'L'
      gen_term_with_sub(model, nets.size)
    else
      gen_term_names(model, nets.size)
    end
  end

  # Generate terminal names based on model and the number of nets.
  def gen_term_names(model, size)
    (0...size).map { |i| "#{model}_#{i + 1}" }
  end

  # Generate terminal names based on model and the number of nets.
  def gen_mim_terms(model)
    terms = %w[mim_top mim_btm]

    return terms unless model.downcase.include?('rfcmim')

    terms << 'mim_sub' # Add sub terminal
    terms
  end

  # Generate terminal names based on model and the number of nets.
  def gen_term_with_sub(model, size)
    terms = (0...size - 1).map { |i| "#{model}_#{i + 1}" }
    terms << "#{model}_sub" # Add sub terminal
  end

  # Map parameters based on the model type.
  #
  # @param ele [String] The type of element (M, C, R, Q, L, D).
  # @param device [RBA::Device] The device object to which parameters will be mapped.
  # @param model [String] The model name of the device.
  # @param params [Hash] Hash containing parameter values.
  def map_params(ele, device, model, params)
    case ele
    when 'M'
      map_mos_params(device, params)
    when 'Q'
      map_bjt_params(device, model, params)
    when 'C'
      map_capacitor_params(device, model, params)
    when 'R'
      map_resistor_params(device, model, params)
    when 'D'
      map_diode_params(device, model, params)
    when 'L'
      map_inductor_params(device, params)
    else
      raise ArgumentError, "#{ele} device with model #{model} is not supported, please recheck"
    end
  end

  # Map parameters for mos devices.
  def map_mos_params(device, params)
    device.set_parameter('W', (params['W'] || 0.0) * (params['M'] || 1.0) * 1e6)
    device.set_parameter('L', (params['L'] || 0.0) * 1e6)
  end

  # Map parameters for a BJT device.
  def map_bjt_params(device, model, params)
    if model.downcase.include?('pnp')
      device.set_parameter('AE', (params['A'] || ((params['W'] || 0.0) * (params['L'] || 0.0))) * 1e12)
      device.set_parameter('PE', (params['P'] || (((params['W'] || 0.0) + (params['L'] || 0.0)) * 2)) * 1e6)
    else
      device.set_parameter('AE', (params['AE'] || ((params['WE'] || 0.0) * (params['LE'] || 0.0))) * 1e12)
      device.set_parameter('PE', (params['PE'] || (((params['WE'] || 0.0) + (params['LE'] || 0.0)) * 2)) * 1e6)
    end
    device.set_parameter('NE', params['M'] || params['NE'] || 1.0)
    device.set_parameter('m',  params['M'] || params['NE'] || 1.0)
  end

  # Map parameters for a diode device.
  def map_diode_params(device, model, params)
    unless model.downcase.include?('diodev') || model.downcase.include?('schottky') || model.downcase.include?('nmoscl')
      device.set_parameter('A', (params['A'] || ((params['W'] || 0.0) * (params['L'] || 0.0))) * 1e12)
      device.set_parameter('P', (params['P'] || (((params['W'] || 0.0) + (params['L'] || 0.0)) * 2)) * 1e6)
    end
    device.set_parameter('m', params['M'] || 1.0)
  end

  # Map parameters for a capacitor device.
  def map_capacitor_params(device, model, params)
    device.set_parameter('w', (params['W'] || 0.0) * 1e6)
    device.set_parameter('l', (params['L'] || 0.0) * 1e6)
    device.set_parameter('m', params['M'] || params['MF'] || 1.0) if model.downcase.include?('cap_cmim')

    if model.downcase.include?('mim')
      device.set_parameter('A', (params['A'] || ((params['W'] || 0.0) * (params['L'] || 0.0))) * 1e12)
      device.set_parameter('P', (params['P'] || (((params['W'] || 0.0) + (params['L'] || 0.0)) * 2)) * 1e6)
    end
    return unless model.downcase.include?('rfcmim')

    device.set_parameter('wfeed', (params['WFEED'] || 0.0) * 1e6)
  end

  # Map parameters for a resistor device.
  def map_resistor_params(device, model, params)
    if model.downcase.include?('tap')
      device.set_parameter('A', (params['A'] || ((params['W'] || 0.0) * (params['L'] || 0.0))) * 1e12)
      device.set_parameter('P',
                           (params['P'] || params['PERIM'] || (((params['W'] || 0.0) + (params['L'] || 0.0)) * 2)) * 1e6)
    elsif RES_DEV.any? { |res| model.downcase.start_with?(res) }
      device.set_parameter('w', (params['W'] || 0.0) * 1e6)
      device.set_parameter('l', (params['L'] || 0.0) * 1e6)
      device.set_parameter('ps', (params['PS'] || 0.0) * 1e6)
      device.set_parameter('b', params['B'] || 0.0)
      device.set_parameter('m', params['M'] || 1.0)
    else
      device.set_parameter('W', (params['W'] || params['WIDTH'] || 0.0) * (params['M'] || 1.0) * 1e6)
      device.set_parameter('L', (params['L'] || params['LENGTH'] || 0.0) * (params['S'] || 1.0) * 1e6)
      device.set_parameter('R', (params['R'] || 0.0) * (params['S'] || 1.0) / (params['M'] || 1.0))
    end
  end

  # Map parameters for an inductor device.
  def map_inductor_params(device, params)
    device.set_parameter('w', (params['W'] || 0.0) * 1e6)
    device.set_parameter('s', (params['S'] || 0.0) * 1e6)
    device.set_parameter('d', (params['D'] || 0.0) * 1e6)
    device.set_parameter('nr_r', params['NR_R'] || 0.0)
  end
end
