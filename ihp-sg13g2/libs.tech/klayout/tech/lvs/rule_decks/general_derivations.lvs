# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#==================================
# ------ GENERAL DERIVATIONS ------
#==================================

logger.info('Starting general LVS derivations')

#=== Global Layers ===
# === CHIP ===
CHIP = case $run_mode
when 'deep'
  extent('*')
else
  #=== FLAT MODE ===
  extent.sized(0.0)
end

# === General Derivations ===
# nwell
nwell_iso = nwell_drw.and(nbulay_drw)
nwell_holes = nwell_drw.holes.not(nwell_drw)

# pwell
pwell_allowed = CHIP.not(pwell_block)
digisub_gap = digisub_drw.not(digisub_drw.sized(-1.nm))
pwell = pwell_allowed.not(nwell_drw).not(digisub_gap)

# General pwell
pwell_sub = pwell_allowed.not(digisub_drw).not(nbulay_drw.interacting(nwell_holes))

# n & p activ
nactiv  = activ.not(psd_drw.join(nsd_block))
pactiv  = activ.and(psd_drw)

# res/cap exclusion
res_mk        = polyres_drw.join(res_drw)
poly_con      = gatpoly.not(res_mk)
metal1_con    = metal1.not(metal1_res)
metal2_con    = metal2.not(metal2_res)
metal3_con    = metal3.not(metal3_res)
metal4_con    = metal4.not(metal4_res)
metal5_con    = metal5.not(metal5_res)
topmetal1_con = topmetal1.not(topmetal1_res).not(ind_drw)
topmetal2_con = topmetal2.not(topmetal2_res).not(ind_drw)

# Gate FETs
tgate   = gatpoly.and(activ).not(res_mk)
ngate   = nactiv.and(tgate)
pgate   = pactiv.and(tgate)
ngate_lv_base = ngate.not(thickgateox_drw)
pgate_lv_base = pgate.not(thickgateox_drw)
ngate_hv_base = ngate.and(thickgateox_drw)
pgate_hv_base = pgate.and(thickgateox_drw)

# S/D FETs
nsd_fet = nactiv.not(nwell_drw).interacting(ngate).not(ngate).not_interacting(res_mk)
psd_fet = pactiv.and(nwell_drw).interacting(pgate).not(pgate).not_interacting(res_mk)


# tap1 labels
well_patt = glob_to_case_insensitive_glob("well")
sub_patt = glob_to_case_insensitive_glob("sub!")
ntap1_lbl = text_drw.texts(well_patt)
ptap1_lbl = text_drw.texts(sub_patt)
# ntap1 marker
ntap1_mk = nwell_drw.interacting(ntap1_lbl)
# ptap1 marker
ptap1_mk = substrate_drw.and(pwell).interacting(ptap1_lbl)

# n & p taps (short connections)
ntap = nactiv.and(nwell_drw).not(ntap1_mk).not(recog_diode).not(gatpoly)
ptap = pactiv.and(pwell).not(ptap1_mk).not(recog_diode).not(gatpoly)
ptap_holes = ptap.holes
ntap_holes = ntap.holes

# S/D (salicide)
nsd_sal = nsd_fet.not(salblock_drw)
psd_sal = psd_fet.not(salblock_drw)

# n & p taps (salicide)
ntap_sal = ntap.not(salblock_drw)
ptap_sal = ptap.not(salblock_drw)

# n/p SD abutted with n/p taps (salicide)
nsd_ptap_abutt = nsd_sal.edges.and(ptap_sal.edges).extended(:in => 1.nm, :out => 1.nm)
psd_ntap_abutt = psd_sal.edges.and(ntap_sal.edges).extended(:in => 1.nm, :out => 1.nm)
