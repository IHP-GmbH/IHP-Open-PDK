<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Fill Metal</description>
 <version>0.1</version>
 <category>filler</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>filler</group-name>
 <menu-path>sg13g2_menu&gt;end("SG13G2 PDK").end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text>
	# Automatic filler generation script for TopMetal
	Activ = source.input("1/0")
	Activ_pin = source.input("1/2")
	Activ_mask = source.input("1/20")
	Activ_filler = source.input("1/22")
	Activ_nofill = source.input("1/23")
	BiWind = source.input("3/0")
	GatPoly = source.input("5/0")
	GatPoly_pin = source.input("5/2")
	GatPoly_filler = source.input("5/22")
	GatPoly_nofill = source.input("5/23")
	Cont = source.input("6/0")
	nSD = source.input("7/0")
	nSD_block = source.input("7/21")
	Metal1 = source.input("8/0")
	Metal1_pin = source.input("8/2")
	Metal1_filler = source.input("8/22")
	Metal1_nofill = source.input("8/23")
	Metal1_slit = source.input("8/24")
	Passiv = source.input("9/0")
	Metal2 = source.input("10/0")
	Metal2_pin = source.input("10/2")
	Metal2_filler = source.input("10/22")
	Metal2_nofill = source.input("10/23")
	Metal2_slit = source.input("10/24")
	BasPoly = source.input("13/0")
	pSD = source.input("14/0")
	DigiBnd = source.input("16/0")
	Via1 = source.input("19/0")
	RES = source.input("24/0")
	SRAM = source.input("25/0")
	TRANS = source.input("26/0")
	IND = source.input("27/0")
	SalBlock = source.input("28/0")
	Via2 = source.input("29/0")
	Metal3 = source.input("30/0")
	Metal3_pin = source.input("30/2")
	Metal3_filler = source.input("30/22")
	Metal3_nofill = source.input("30/23")
	Metal3_slit = source.input("30/24")
	NWell = source.input("31/0")
	NWell_pin = source.input("31/2")
	nBuLay = source.input("32/0")
	nBuLay_block = source.input("32/21")
	EmWind = source.input("33/0")
	DeepCo = source.input("35/0")
	MIM = source.input("36/0")
	EdgeSeal = source.input("39/0")
	dfpad = source.input("41/0")
	dfpad_pillar = source.input("41/35")
	dfpad_sbump = source.input("41/36")
	ThickGateOx = source.input("44/0")
	PWell = source.input("46/0")
	PWell_block = source.input("46/21")
	Via3 = source.input("49/0")
	Metal4 = source.input("50/0")
	Metal4_pin = source.input("50/2")
	Metal4_filler = source.input("50/22")
	Metal4_nofill = source.input("50/23")
	Metal4_slit = source.input("50/24")
	EmPoly = source.input("55/0")
	DigiSub = source.input("60/0")
	TEXT_0 = source.labels("63/0")
	Via4 = source.input("66/0")
	Metal5 = source.input("67/0")
	Metal5_pin = source.input("67/2")
	Metal5_filler = source.input("67/22")
	Metal5_nofill = source.input("67/23")
	Metal5_slit = source.input("67/24")
	Polimide = source.input("98/0")
	Recog = source.input("99/0")
	Recog_esd = source.input("99/30")
	Recog_diode = source.input("99/31")
	Recog_tsv = source.input("99/32")
	EXTBlock = source.input("111/0")
	TopVia1 = source.input("125/0")
	TopMetal1 = source.input("126/0")
	TopMetal1_pin = source.input("126/2")
	TopMetal1_filler = source.input("126/22")
	TopMetal1_nofill = source.input("126/23")
	TopMetal1_slit = source.input("126/24")
	PolyRes = source.input("128/0")
	Vmim = source.input("129/0")
	TopVia2 = source.input("133/0")
	TopMetal2 = source.input("134/0")
	TopMetal2_pin = source.input("134/2")
	TopMetal2_filler = source.input("134/22")
	TopMetal2_nofill = source.input("134/23")
	TopMetal2_slit = source.input("134/24")
	ColWind = source.input("139/0")
	RFMEM = source.input("147/0")
	DeepVia = source.input("152/0")
	LBE = source.input("157/0")
	NoMetFiller = source.input("160/0")


	# Create a line edit widget
	#
	# text - The default text for the line edit
	#
	# Returns a QCheckBox instance
	def self.create_input_field(text)
		line_edit = RBA::QLineEdit.new()
		line_edit.setText(text)
		line_edit
	end

	# Create buttons for the distance dialog
	#
	# dialog - The distances dialog
	#
	# Returns a QWidget instance containing the buttons
	def self.create_buttons(dialog)
		container = RBA::QWidget.new
		layout = RBA::QHBoxLayout.new(container)

		ok_button = RBA::QPushButton.new('OK')
		ok_button.clicked.connect(Proc.new { dialog.accept })
		cancel_button = RBA::QPushButton.new('Cancel')
		cancel_button.clicked.connect(Proc.new { dialog.reject })

		layout.addWidget(ok_button)
		layout.addWidget(cancel_button)

		container
	end

	# Create dialog to select custom distances between Mx filler
	#
	# defaults - Default distances to add to the input fields
	def self.create_options_dialog(defaults)
		dialog = RBA::QDialog.new
		dialog.windowTitle = "Metal Fill Distances"
		layout = RBA::QFormLayout.new(dialog)

		layout.addRow('M1 Distance', create_input_field(defaults['distance_m1']))
		layout.addRow('M2 Distance', create_input_field(defaults['distance_m2']))
		layout.addRow('M3 Distance', create_input_field(defaults['distance_m3']))
		layout.addRow('M4 Distance', create_input_field(defaults['distance_m4']))
		layout.addRow('M5 Distance', create_input_field(defaults['distance_m5']))

		layout.addRow('', create_buttons(dialog))

		dialog
	end

	# Update distance map from the dialog
	#
	# distances - The distances map to be updated
	# dialog    - The dialog containing the updated options
	def self.update_distances_from_dialog(distances, dialog)
		distances['distance_m1'] = dialog.layout.itemAt(1).widget.text.to_f
		if 0.42 > distances['distance_m1']
			print("M1fil.b is defined with min. 0.42. Setting 0.42 as distance for Metal1:Filler\n")
			distances['distance_m1'] = 0.42
		end
		distances['distance_m2'] = dialog.layout.itemAt(3).widget.text.to_f
		if 0.42 > distances['distance_m1']
			print("M2fil.b is defined with min. 0.42. Setting 0.42 as distance for Metal2:Filler\n")
			distances['distance_m2'] = 0.42
		end
		distances['distance_m3'] = dialog.layout.itemAt(5).widget.text.to_f
		if 0.42 > distances['distance_m1']
			print("M3fil.b is defined with min. 0.42. Setting 0.42 as distance for Metal3:Filler\n")
			distances['distance_m3'] = 0.42
		end
		distances['distance_m4'] = dialog.layout.itemAt(7).widget.text.to_f
		if 0.42 > distances['distance_m1']
			print("M4fil.b is defined with min. 0.42. Setting 0.42 as distance for Metal4:Filler\n")
			distances['distance_m4'] = 0.42
		end
		distances['distance_m5'] = dialog.layout.itemAt(9).widget.text.to_f
		if 0.42 > distances['distance_m1']
			print("M5fil.b is defined with min. 0.42. Setting 0.42 as distance for Metal5:Filler\n")
			distances['distance_m5'] = 0.42
		end
	end

	distances = {
		'distance_m1' => 1.5,
		'distance_m2' => 1.5,
		'distance_m3' => 2.0,
		'distance_m4' => 2.0,
		'distance_m5' => 2.0
	}

	batch_mode = !RBA::Application::instance.main_window
	if !batch_mode
		dialog = create_options_dialog(distances)
		# Show the dialog box and handle user input
		if dialog.exec == 1 #RBA::QDialog::Accepted
			update_distances_from_dialog(distances, dialog)
		end
	end

	# Paramter
	width_m1_s = 1.0
	height_m1_s = 1.0
	distance_m1_s = distances['distance_m1']
	width_m1_m = width_m1_s + distance_m1_s + width_m1_s
	height_m1_m = height_m1_s + distance_m1_s + height_m1_s
	distance_m1_m = distance_m1_s

	width_m2_s = 1.0
	height_m2_s = 1.0
	distance_m2_s = distances['distance_m2']
	width_m2_m = width_m2_s + distance_m2_s + width_m2_s
	height_m2_m = height_m2_s + distance_m2_s + height_m2_s
	distance_m2_m = distance_m2_s

	width_m3_s = 1.0
	height_m3_s = 1.0
	distance_m3_s = distances['distance_m3']
	width_m3_m = width_m3_s + distance_m3_s + width_m3_s
	height_m3_m = height_m3_s + distance_m3_s + height_m3_s
	distance_m3_m = distance_m3_s

	width_m4_s = 1.0
	height_m4_s = 1.0
	distance_m4_s = distances['distance_m4']
	width_m4_m = width_m4_s + distance_m4_s + width_m4_s
	height_m4_m = height_m4_s + distance_m4_s + height_m4_s
	distance_m4_m = distance_m4_s

	width_m5_s = 1.0
	height_m5_s = 1.0
	distance_m5_s = distances['distance_m5']
	width_m5_m = width_m5_s + distance_m5_s + width_m5_s
	height_m5_m = height_m5_s + distance_m5_s + height_m5_s
	distance_m5_m = distance_m5_s

	# Create filler cell
	pattern_m1_s = fill_pattern("Met1_S_FILL_CELL").shape(8, 22,  box(0.0, 0.0, width_m1_s, height_m1_s))
	pattern_m1_m = fill_pattern("Met1_M_FILL_CELL").shape(8, 22,  box(0.0, 0.0, width_m1_m, height_m1_m))
	pattern_m2_s = fill_pattern("Met2_S_FILL_CELL").shape(10, 22, box(0.0, 0.0, width_m2_s, height_m2_s))
	pattern_m2_m = fill_pattern("Met2_M_FILL_CELL").shape(10, 22, box(0.0, 0.0, width_m2_m, height_m2_m))
	pattern_m3_s = fill_pattern("Met3_S_FILL_CELL").shape(30, 22, box(0.0, 0.0, width_m3_s, height_m3_s))
	pattern_m3_m = fill_pattern("Met3_M_FILL_CELL").shape(30, 22, box(0.0, 0.0, width_m3_m, height_m3_m))
	pattern_m4_s = fill_pattern("Met4_S_FILL_CELL").shape(50, 22, box(0.0, 0.0, width_m4_s, height_m4_s))
	pattern_m4_m = fill_pattern("Met4_M_FILL_CELL").shape(50, 22, box(0.0, 0.0, width_m4_m, height_m4_m))
	pattern_m5_s = fill_pattern("Met5_S_FILL_CELL").shape(67, 22, box(0.0, 0.0, width_m5_s, height_m5_s))
	pattern_m5_m = fill_pattern("Met5_M_FILL_CELL").shape(67, 22, box(0.0, 0.0, width_m5_m, height_m5_m))

	print("Filling M1\n")
	M1Fil_b = Metal1_filler.dup
	M1Fil_b.size(0.42, 0.42, "square_limit")
	M1Fil_c = Metal1.dup
	M1Fil_c.size(0.42, 0.42, "square_limit")
	M1Fil_d = TRANS.dup
	M1Fil_d.size(1.0, 1.0, "square_limit")
	M1Fil = EdgeSeal.holes - (M1Fil_b | M1Fil_c | M1Fil_d | Metal1_nofill | Metal1_slit | TRANS)
	M1Fil_left = M1Fil.fill_with_left(pattern_m1_m, hstep(width_m1_m + distance_m1_m), vstep(height_m1_m + distance_m1_m))
	M1Fil_left.fill(pattern_m1_s, hstep(width_m1_s + distance_m1_s), vstep(height_m1_s + distance_m1_s))

	print("Filling M2\n")
	M2Fil_b = Metal2_filler.dup
	M2Fil_b.size(0.42, 0.42, "square_limit")
	M2Fil_c = Metal2.dup
	M2Fil_c.size(0.42, 0.42, "square_limit")
	M2Fil_d = TRANS.dup
	M2Fil_d.size(1.0, 1.0, "square_limit")
	M2Fil = EdgeSeal.holes - (M2Fil_b | M2Fil_c | M2Fil_d | Metal2_nofill | Metal2_slit | TRANS)
	M2Fil_left = M2Fil.fill_with_left(pattern_m2_m, hstep(width_m2_m + distance_m2_m), vstep(height_m2_m + distance_m2_m))
	M2Fil_left.fill(pattern_m2_s, hstep(width_m2_s + distance_m2_s), vstep(height_m2_s + distance_m2_s))

	print("Filling M3\n")
	M3Fil_b = Metal3_filler.dup
	M3Fil_b.size(0.42, 0.42, "square_limit")
	M3Fil_c = Metal3.dup
	M3Fil_c.size(0.42, 0.42, "square_limit")
	M3Fil_d = TRANS.dup
	M3Fil_d.size(1.0, 1.0, "square_limit")
	M3Fil = EdgeSeal.holes - (M3Fil_b | M3Fil_c | M3Fil_d | Metal3_nofill | Metal3_slit | TRANS)
	M3Fil_left = M3Fil.fill_with_left(pattern_m3_m, hstep(width_m3_m + distance_m3_m), vstep(height_m3_m + distance_m3_m))
	M3Fil_left.fill(pattern_m3_s, hstep(width_m3_s + distance_m3_s), vstep(height_m3_s + distance_m3_s))

	print("Filling M4\n")
	M4Fil_b = Metal4_filler.dup
	M4Fil_b.size(0.42, 0.42, "square_limit")
	M4Fil_c = Metal4.dup
	M4Fil_c.size(0.42, 0.42, "square_limit")
	M4Fil_d = TRANS.dup
	M4Fil_d.size(1.0, 1.0, "square_limit")
	M4Fil = EdgeSeal.holes - (M4Fil_b | M4Fil_c | M4Fil_d | Metal4_nofill | Metal4_slit | TRANS)
	M4Fil_left = M4Fil.fill_with_left(pattern_m4_m, hstep(width_m4_m + distance_m4_m), vstep(height_m4_m + distance_m4_m))
	M4Fil_left.fill(pattern_m4_s, hstep(width_m4_s + distance_m4_s), vstep(height_m4_s + distance_m4_s))

	print("Filling M5\n")
	M5Fil_b = Metal5_filler.dup
	M5Fil_b.size(0.42, 0.42, "square_limit")
	M5Fil_c = Metal5.dup
	M5Fil_c.size(0.42, 0.42, "square_limit")
	M5Fil_d = TRANS.dup
	M5Fil_d.size(1.0, 1.0, "square_limit")
	M5Fil = EdgeSeal.holes - (M5Fil_b | M5Fil_c | M5Fil_d | Metal5_nofill | Metal5_slit | TRANS)
	M5Fil_left = M5Fil.fill_with_left(pattern_m5_m, hstep(width_m5_m + distance_m5_m), vstep(height_m5_m + distance_m5_m))
	M5Fil_left.fill(pattern_m5_s, hstep(width_m5_s + distance_m5_s), vstep(height_m5_s + distance_m5_s))
	</text>
</klayout-macro>
