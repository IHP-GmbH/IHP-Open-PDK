*******************************************************************************
*                                                                             *
* Library:      SG13G2_dev                                                    *
* Technologies: SG13G2                                                        *
*                                                                             *
* Model:        PSP 103.6                                                     *
* Revision:     200310                                                        *
*                                                                             *
*******************************************************************************
*                                                                             *
* Copyright 2023 IHP PDK Authors                                              *
*                                                                             *
* Licensed under the Apache License, Version 2.0 (the "License");             *
* you may not use this file except in compliance with the License.            *
* You may obtain a copy of the License at                                     *
*                                                                             *
*     https://www.apache.org/licenses/LICENSE-2.0                             *
*                                                                             *
* Unless required by applicable law or agreed to in writing, software         *
* distributed under the License is distributed on an "AS IS" BASIS,           *
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
* See the License for the specific language governing permissions and         *
* limitations under the License.                                              *
*                                                                             *
*******************************************************************************
*******************************************************************************
*                                                                             *
*                                                                             *
*              C O M M O N    SG 13  M O S     M O D E L S                    *
*                                                                             *
*                                                                             *
*******************************************************************************
*
* NOTE: do not include this file directly in the netlist, use models.typ, .bcs or .wcs only
*
*
*
*******************************************************************************
* variable C section
*******************************************************************************


*******************************************************************************
* MOS transistor section
*******************************************************************************



* MOS-Subckt with D/S-overlap possibility
*
*       z1              z2            z1
*   ----------------------------------------
*   |          |   |         |   |         |
*   |    S     | G |   D     | G |    S    |  w/ng, >=0.15u
*   |          |   |         |   |         |
*   ----------------------------------------
*
*  z1=0.34u, z2=0.38u
*
* Parameters as,ad,ps,pd are calculated automatically, if <= 0
*
* NOTE:
* values are one-sigma deviations (1/3 of min-max)
.param mm_ok=1

.subckt sg13_hv_nmos d g s b
+ w=0.35u l=0.34u ng=1 m=1 as=0 ad=0 pd=0 ps=0 trise=0 z1=0.34e-6 z2=0.38e-6 wmin=0.15e-6 rfmode=0 pre_layout=1
* if as = 0, calculate value, else take it
* if as is given externally, no adjustment for ng is done! -> must be done in the extractor
* if ng>1 and as=0 (in schematic) recalculate!

.include sg13g2_moshv_parm.lib

.param nmos_delvto_mm='sg13g2_hv_nmos_delvto_mm/sqrt(m*l*w*1e12)'
.if (as <= 1e-50)
    .if (floor(floor(ng/2+0.501)*2+0.001) != ng)
        Nsg13_hv_nmos d g s b sg13g2_hv_nmos_psp
          + w='agauss(w, sg13g2_hv_nmos_dw_mm, mm_ok)'
          + l='agauss(l, sg13g2_hv_nmos_dl_mm, mm_ok)' nf='ng' mult='m'
          + as='max(w/ng,wmin)*(z1+((ng-1)/2)*z2)'
          + ad='max(w/ng,wmin)*(z1+((ng-1)/2)*z2)'
          + ps='2*(max(w/ng,wmin)*((ng-1)/2+1)+z1+(ng-1)/2*z2)'
          + pd='2*(max(w/ng,wmin)*((ng-1)/2+1)+z1+(ng-1)/2*z2)'
          + dta=trise
          + ngcon=2
          + delvto='agauss(0, nmos_delvto_mm, mm_ok)'
          + factuo='agauss(1, sg13g2_hv_nmos_factuo_mm, mm_ok)'
    .else
        Nsg13_hv_nmos d g s b sg13g2_hv_nmos_psp
          + w='agauss(w, sg13g2_hv_nmos_dw_mm, mm_ok)'
          + l='agauss(l, sg13g2_hv_nmos_dl_mm, mm_ok)' nf='ng' mult='m'
          + as='max(w/ng,wmin)*(2*z1+max(0,(ng-2)/2)*z2)'
          + ad='max(w/ng,wmin)*z2/2*ng'
          + ps='2*(max(w/ng,wmin)*(2+max(ng-2,0)/2)+2*z1+max(ng-2,0)/2*z2)'
          + pd='(max(w/ng,wmin)+z2)*ng'
          + dta=trise
          + ngcon=2
          + delvto='agauss(0, nmos_delvto_mm, mm_ok)'
          + factuo='agauss(1, sg13g2_hv_nmos_factuo_mm, mm_ok)'
    .endif
.else
    Nsg13_hv_nmos d g s b sg13g2_hv_nmos_psp
      + w='agauss(w, sg13g2_hv_nmos_dw_mm, mm_ok)'
      + l='agauss(l, sg13g2_hv_nmos_dl_mm, mm_ok)'
      + as='as' ad='ad' pd='pd' ps='ps' nf='ng' mult='m'
      + dta=trise
      + ngcon=2
      + delvto='agauss(0, nmos_delvto_mm, mm_ok)'
      + factuo='agauss(1, sg13g2_hv_nmos_factuo_mm, mm_ok)'
.endif
.ends

.subckt sg13_hv_pmos d g s b
+ w=0.35u l=0.28u ng=1 m=1 as=0 ad=0 pd=0 ps=0 trise=0 z1=0.34e-6 z2=0.38e-6 wmin=0.15e-6 rfmode=0 pre_layout=1

.include sg13g2_moshv_parm.lib

.param pmos_delvto_mm='sg13g2_hv_pmos_delvto_mm/sqrt(m*l*w*1e12)'
.if (as <= 1e-50)
    .if (floor(floor(ng/2+0.501)*2+0.001) != ng)
        Nsg13_hv_pmos d g s b sg13g2_hv_pmos_psp
          + w='agauss(w, sg13g2_hv_pmos_dw_mm, mm_ok)'
          + l='agauss(l, sg13g2_hv_pmos_dl_mm, mm_ok)' nf='ng' mult='m'
          + as='max(w/ng,wmin)*(z1+((ng-1)/2)*z2)'
          + ad='max(w/ng,wmin)*(z1+((ng-1)/2)*z2)'
          + ps='2*(max(w/ng,wmin)*((ng-1)/2+1)+z1+(ng-1)/2*z2)'
          + pd='2*(max(w/ng,wmin)*((ng-1)/2+1)+z1+(ng-1)/2*z2)'
          + dta=trise
          + ngcon=2
          + delvto='agauss(0, pmos_delvto_mm, mm_ok)'
          + factuo='agauss(1, sg13g2_hv_pmos_factuo_mm, mm_ok)'
    .else
        Nsg13_hv_pmos d g s b sg13g2_hv_pmos_psp
          + w='agauss(w, sg13g2_hv_pmos_dw_mm, mm_ok)'
          + l='agauss(l, sg13g2_hv_pmos_dl_mm, mm_ok)' nf='ng' mult='m'
          + as='max(w/ng,wmin)*(2*z1+max(0,(ng-2)/2)*z2)'
          + ad='max(w/ng,wmin)*z2/2*ng'
          + ps='2*(max(w/ng,wmin)*(2+max(ng-2,0)/2)+2*z1+max(ng-2,0)/2*z2)'
          + pd='(max(w/ng,wmin)+z2)*ng'
          + dta=trise
          + ngcon=2
          + delvto='agauss(0, pmos_delvto_mm, mm_ok)'
          + factuo='agauss(1, sg13g2_hv_pmos_factuo_mm, mm_ok)'
    .endif
.else
    Nsg13_hv_pmos d g s b sg13g2_hv_pmos_psp
      + w='agauss(w, sg13g2_hv_pmos_dw_mm, mm_ok)'
      + l='agauss(l, sg13g2_hv_pmos_dl_mm, mm_ok)'
      + as='as' ad='ad' pd='pd' ps='ps' nf='ng' mult='m'
      + dta=trise
      + ngcon=2
      + delvto='agauss(0, pmos_delvto_mm, mm_ok)'
      + factuo='agauss(1, sg13g2_hv_pmos_factuo_mm, mm_ok)'
.endif
.ends
